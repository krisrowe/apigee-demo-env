export HIGHLIGHT_COLOR='\033[1;33m'
export EXAMPLE_COLOR='\033[1;32m'
export NO_COLOR='\033[0m'
export ERROR_COLOR='\033[1;31m'
export WARN_COLOR='\033[0;33m'
export INFO_COLOR='\033[1;34m'

if [[ -z "$1" ]]; then
    printf "${ERROR_COLOR}No command argument. Expected: ${EXAMPLE_COLOR}demo [command]\n"
    exit 1
fi

set -e # cause script to exit (stop) immediately if any one step fails

# Note the directory where this main script resides.
export REPO_DIRECTORY=$(dirname "$0")
# Clear environment variables with common names that may be set outside
# the script to avoid unexpectedly treating them as direct arguments.
unset PROJECT_ID  
unset NETWORK_NAME

# Read command-line switches and populate local variables.
for var in "$@"
do
  case "$var" in
    --network=*)
      export NETWORK_NAME="${var#*=}"
      ;;
    --project=*)
      PROJECT_ID="${var#*=}"
      ;;
    --location=*)
      APIGEE_INSTANCE_LOCATION="${var#*=}"
      ;;  
    --domain=*)
      NEW_APIGEE_HOST_NAME="${var#*=}"
      ;;   
  esac
done

if [[ -z "${PROJECT_ID}" ]]; then
  export PROJECT_ID=$(gcloud config get project)
  if [[ -z "${PROJECT_ID}" ]]; then
    printf "${ERROR_COLOR}Missing --project argument.${NO_COLOR}\n"
    exit 1
  fi
fi

export AUTH="Authorization: Bearer $(gcloud auth print-access-token)"

# Run the command specified by the user.
# Apply a regex validation to avoid unsafe script/command execution.
if [[ $1 =~ ^[A-Za-z0-9_-]+$ ]]; then
    DEMO_COMMAND_PATH=${REPO_DIRECTORY}/lib/$1
    if test -f "$DEMO_COMMAND_PATH"; then
        . ${DEMO_COMMAND_PATH}
    else
        printf "${ERROR_COLOR}Command not found: $1\n"
        exit 1
    fi
else
    printf "${ERROR_COLOR}Invalid command: $1\n"
    exit 1
fi