export HIGHLIGHT_COLOR='\033[1;33m'
export EXAMPLE_COLOR='\033[1;32m'
export NO_COLOR='\033[0m'
export ERROR_COLOR='\033[1;31m'
export WARN_COLOR='\033[0;33m'
export INFO_COLOR='\033[1;34m'

if [[ -z "$1" ]]; then
    printf "${ERROR_COLOR}No command argument. Expected: ${EXAMPLE_COLOR}demo [command]\n"
    exit 1
fi

set -e # cause script to exit (stop) immediately if any one step fails

# Note the directory where this main script resides.
export REPO_DIRECTORY=$(dirname "$0")
# Clear environment variables with common names that may be set outside
# the script to avoid unexpectedly treating them as direct arguments.
unset PROJECT_ID  
unset NETWORK_NAME

# Read command-line switches and populate local variables.
for var in "$@"
do
  case "$var" in
    --network=*)
      export NETWORK_NAME="${var#*=}"
      ;;
    --project=*)
      PROJECT_ID="${var#*=}"
      ;;
    --location=*)
      APIGEE_INSTANCE_LOCATION="${var#*=}"
      ;;  
    --domain=*)
      NEW_APIGEE_HOST_NAME="${var#*=}"
      ;;   
  esac
done

if [[ -z "${PROJECT_ID}" ]]; then
  export PROJECT_ID=$(gcloud config get project)
  if [[ -z "${PROJECT_ID}" ]]; then
    printf "${ERROR_COLOR}Missing --project argument.${NO_COLOR}\n"
    exit 1
  fi
fi

export AUTH="Authorization: Bearer $(gcloud auth print-access-token)"

APIGEE_PEERING_RANGE=apigee-peering

APIGEE_INSTANCES=$(curl -H "$AUTH" -s "https://apigee.googleapis.com/v1/organizations/$PROJECT_ID/instances")
APIGEE_INSTANCE_JSON=$(echo $APIGEE_CHECK_ACCESS | jq -r ".instances[0]")
if ! [[ -z "$APIGEE_INSTANCE_JSON" || "$APIGEE_INSTANCE_JSON" = null ]]; then
  # Apigee instance found.
  if [[ -z "${NETWORK_NAME}" ]]; then
      # We have an Apigee instance, but no network was specified. 
      # Let's infer network from peering for existing instance.
      {
        NETWORK_NAME=$(gcloud compute addresses list --project=$PROJECT_ID --format="value(network)" --filter="name=${APIGEE_PEERING_RANGE}" 2> /dev/null)
      } || {
        # Catching this error prevents the script from stopping here.
        # Do some command as required for proper syntax here.
        echo "" > /dev/null 
      } 
  fi
else
  # It may be fine that we did not find an Apigee instance yet, 
  # but make sure this is not due to an auth error.
  APIGEE_ERROR=$(echo $APIGEE_INSTANCES | jq -r ".error")
  if ! [[ -z "$APIGEE_ERROR" || "$APIGEE_ERROR" = null ]]; then
    printf "${ERROR_COLOR}Error querying Apigee instances for project ${PROJECT_ID}:\n${APIGEE_ERROR}\n"
    exit 1
  fi
fi

# Run the command specified by the user.
# Apply a regex validation to avoid unsafe script/command execution.
if [[ $1 =~ ^[A-Za-z0-9_-]+$ ]]; then
    DEMO_COMMAND_PATH=${REPO_DIRECTORY}/lib/$1
    if test -f "$DEMO_COMMAND_PATH"; then
        . ${DEMO_COMMAND_PATH}
    else
        printf "${ERROR_COLOR}Command not found: $1\n"
        exit 1
    fi
else
    printf "${ERROR_COLOR}Invalid command: $1\n"
    exit 1
fi